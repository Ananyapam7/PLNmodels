// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// optim_spherical
Rcpp::List optim_spherical(arma::vec par, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::vec& w, Rcpp::List options);
RcppExport SEXP _PLNmodels_optim_spherical(SEXP parSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP wSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_spherical(par, Y, X, O, w, options));
    return rcpp_result_gen;
END_RCPP
}
// optim_diagonal
Rcpp::List optim_diagonal(arma::vec par, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::vec& w, Rcpp::List options);
RcppExport SEXP _PLNmodels_optim_diagonal(SEXP parSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP wSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_diagonal(par, Y, X, O, w, options));
    return rcpp_result_gen;
END_RCPP
}
// optim_full
Rcpp::List optim_full(arma::vec par, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::vec& w, Rcpp::List options);
RcppExport SEXP _PLNmodels_optim_full(SEXP parSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP wSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_full(par, Y, X, O, w, options));
    return rcpp_result_gen;
END_RCPP
}
// optim_rank
Rcpp::List optim_rank(arma::vec par, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::vec& w, const int& q, Rcpp::List options);
RcppExport SEXP _PLNmodels_optim_rank(SEXP parSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP wSEXP, SEXP qSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type q(qSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_rank(par, Y, X, O, w, q, options));
    return rcpp_result_gen;
END_RCPP
}
// optim_sparse
Rcpp::List optim_sparse(arma::vec par, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::vec& w, const arma::mat& Omega, Rcpp::List options);
RcppExport SEXP _PLNmodels_optim_sparse(SEXP parSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP wSEXP, SEXP OmegaSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_sparse(par, Y, X, O, w, Omega, options));
    return rcpp_result_gen;
END_RCPP
}
// VEstep_PLN_full
Rcpp::List VEstep_PLN_full(arma::vec par, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::vec& w, const arma::mat& Theta, const arma::mat& Omega, Rcpp::List options);
RcppExport SEXP _PLNmodels_VEstep_PLN_full(SEXP parSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP wSEXP, SEXP ThetaSEXP, SEXP OmegaSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(VEstep_PLN_full(par, Y, X, O, w, Theta, Omega, options));
    return rcpp_result_gen;
END_RCPP
}
// VEstep_PLN_diagonal
Rcpp::List VEstep_PLN_diagonal(arma::vec par, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::vec& w, const arma::mat& Theta, const arma::mat& Omega, Rcpp::List options);
RcppExport SEXP _PLNmodels_VEstep_PLN_diagonal(SEXP parSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP wSEXP, SEXP ThetaSEXP, SEXP OmegaSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(VEstep_PLN_diagonal(par, Y, X, O, w, Theta, Omega, options));
    return rcpp_result_gen;
END_RCPP
}
// VEstep_PLN_spherical
Rcpp::List VEstep_PLN_spherical(arma::vec par, const arma::mat& Y, const arma::mat& X, const arma::mat& O, const arma::vec& w, const arma::mat& Theta, const arma::mat& Omega, Rcpp::List options);
RcppExport SEXP _PLNmodels_VEstep_PLN_spherical(SEXP parSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP wSEXP, SEXP ThetaSEXP, SEXP OmegaSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(VEstep_PLN_spherical(par, Y, X, O, w, Theta, Omega, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_full
Rcpp::List cpp_optimize_full(const Rcpp::List& init_parameters, const arma::mat& y, const arma::mat& x, const arma::mat& o, const arma::vec& w, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_full(SEXP init_parametersSEXP, SEXP ySEXP, SEXP xSEXP, SEXP oSEXP, SEXP wSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init_parameters(init_parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type o(oSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_full(init_parameters, y, x, o, w, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_spherical
Rcpp::List cpp_optimize_spherical(const Rcpp::List& init_parameters, const arma::mat& y, const arma::mat& x, const arma::mat& o, const arma::vec& w, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_spherical(SEXP init_parametersSEXP, SEXP ySEXP, SEXP xSEXP, SEXP oSEXP, SEXP wSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init_parameters(init_parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type o(oSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_spherical(init_parameters, y, x, o, w, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_diagonal
Rcpp::List cpp_optimize_diagonal(const Rcpp::List& init_parameters, const arma::mat& y, const arma::mat& x, const arma::mat& o, const arma::vec& w, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_diagonal(SEXP init_parametersSEXP, SEXP ySEXP, SEXP xSEXP, SEXP oSEXP, SEXP wSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init_parameters(init_parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type o(oSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_diagonal(init_parameters, y, x, o, w, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_rank
Rcpp::List cpp_optimize_rank(const Rcpp::List& init_parameters, const arma::mat& y, const arma::mat& x, const arma::mat& o, const arma::vec& w, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_rank(SEXP init_parametersSEXP, SEXP ySEXP, SEXP xSEXP, SEXP oSEXP, SEXP wSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init_parameters(init_parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type o(oSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_rank(init_parameters, y, x, o, w, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_sparse
Rcpp::List cpp_optimize_sparse(const Rcpp::List& init_parameters, const arma::mat& y, const arma::mat& x, const arma::mat& o, const arma::vec& w, const arma::mat& omega, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_sparse(SEXP init_parametersSEXP, SEXP ySEXP, SEXP xSEXP, SEXP oSEXP, SEXP wSEXP, SEXP omegaSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init_parameters(init_parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type o(oSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_sparse(init_parameters, y, x, o, w, omega, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_optimize_ve
Rcpp::List cpp_optimize_ve(const Rcpp::List& init_parameters, const arma::mat& y, const arma::mat& x, const arma::mat& o, const arma::mat& theta, const arma::mat& sigma, const Rcpp::List& configuration);
RcppExport SEXP _PLNmodels_cpp_optimize_ve(SEXP init_parametersSEXP, SEXP ySEXP, SEXP xSEXP, SEXP oSEXP, SEXP thetaSEXP, SEXP sigmaSEXP, SEXP configurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type init_parameters(init_parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type o(oSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type configuration(configurationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimize_ve(init_parameters, y, x, o, theta, sigma, configuration));
    return rcpp_result_gen;
END_RCPP
}
// cpp_internal_tests
bool cpp_internal_tests();
RcppExport SEXP _PLNmodels_cpp_internal_tests() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_internal_tests());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PLNmodels_optim_spherical", (DL_FUNC) &_PLNmodels_optim_spherical, 6},
    {"_PLNmodels_optim_diagonal", (DL_FUNC) &_PLNmodels_optim_diagonal, 6},
    {"_PLNmodels_optim_full", (DL_FUNC) &_PLNmodels_optim_full, 6},
    {"_PLNmodels_optim_rank", (DL_FUNC) &_PLNmodels_optim_rank, 7},
    {"_PLNmodels_optim_sparse", (DL_FUNC) &_PLNmodels_optim_sparse, 7},
    {"_PLNmodels_VEstep_PLN_full", (DL_FUNC) &_PLNmodels_VEstep_PLN_full, 8},
    {"_PLNmodels_VEstep_PLN_diagonal", (DL_FUNC) &_PLNmodels_VEstep_PLN_diagonal, 8},
    {"_PLNmodels_VEstep_PLN_spherical", (DL_FUNC) &_PLNmodels_VEstep_PLN_spherical, 8},
    {"_PLNmodels_cpp_optimize_full", (DL_FUNC) &_PLNmodels_cpp_optimize_full, 6},
    {"_PLNmodels_cpp_optimize_spherical", (DL_FUNC) &_PLNmodels_cpp_optimize_spherical, 6},
    {"_PLNmodels_cpp_optimize_diagonal", (DL_FUNC) &_PLNmodels_cpp_optimize_diagonal, 6},
    {"_PLNmodels_cpp_optimize_rank", (DL_FUNC) &_PLNmodels_cpp_optimize_rank, 6},
    {"_PLNmodels_cpp_optimize_sparse", (DL_FUNC) &_PLNmodels_cpp_optimize_sparse, 7},
    {"_PLNmodels_cpp_optimize_ve", (DL_FUNC) &_PLNmodels_cpp_optimize_ve, 7},
    {"_PLNmodels_cpp_internal_tests", (DL_FUNC) &_PLNmodels_cpp_internal_tests, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_PLNmodels(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
